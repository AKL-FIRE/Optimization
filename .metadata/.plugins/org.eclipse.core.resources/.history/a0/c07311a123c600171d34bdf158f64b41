import numpy as np
def GradientDescent(data,theta,alpha,epsilon,count=1000):
    k=1
    J = CalculateJ(data, theta)
    while k <= count and J >= epsilon:
        d = 

def CalculateH(x,theta):
    return theta.transpose() * x;

def CalculateJ(data,theta):
    length = data.shape[1]
    return 1 / (2 * length) * np.sum(CalculateH(data[0,:], theta) - data[1,:]) ** 2,axis=0)

def CalculateDerivative(data,theta):
    return (CalculateDerivative(data, theta+1e-5) - CalculateDerivative(data, theta) / 1e-5